<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[消息队列之ActiveMQ]]></title>
    <url>%2F2016%2F01%2F16%2F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%20ActiveMQ%2F</url>
    <content type="text"><![CDATA[&lt;h1 class=&quot;title&quot;&gt;消息队列之 ActiveMQ&lt;/h1&gt; &lt;!-- 文章内容 --&gt; &lt;div data-note-content=&quot;&quot; class=&quot;show-content&quot;&gt; &lt;div class=&quot;show-content-free&quot;&gt; ActiveMQ 特点 ActiveMQ 是由 Apache 出品的一款开源消息中间件，旨在为应用程序提供高效、可扩展、稳定、安全的企业级消息通信。它的设计目标是提供标准的、面向消息的、多语言的应用集成消息通信中间件。ActiveMQ 实现了 JMS 1.1 并提供了很多附加的特性，比如 JMX 管理、主从管理、消息组通信、消息优先级、延迟接收消息、虚拟接收者、消息持久化、消息队列监控等等。其主要特性有：支持包括 Java、C、C++、C#、Ruby、Perl、Python、PHP 等多种语言的客户端和协议。协议包含 OpenWire、Stomp、AMQP、MQTT 。提供了像消息组通信、消息优先级、延迟接收消息、虚拟接收者、消息持久化之类的高级特性完全支持 JMS 1.1 和 J2EE 1.4规范（包括持久化、分布式事务消息、事务）对 Spring 框架的支持，ActiveMQ 可以通过 Spring 的配置文件方式很容易嵌入到 Spring 应用中通过了常见的 J2EE 服务器测试，比如 TomEE、Geronimo、JBoss、GlassFish、WebLogic连接方式的多样化，ActiveMQ 提供了多种连接模式，例如 in-VM、TCP、SSL、NIO、UDP、多播、JGroups、JXTA支持通过使用 JDBC 和 journal 实现消息的快速持久化为高性能集群、客户端-服务器、点对点通信等场景而设计提供了技术和语言中立的 REST API 接口支持 Ajax 方式调用 ActiveMQActiveMQ 可以轻松地与 CXF、Axis 等 Web Service 技术整合，以提供可靠的消息传递可用作为内存中的 JMS 提供者，非常适合 JMS 单元测试基本概念因为 ActiveMQ 是完整支持 JMS 1.1 的，所以从 Java 使用者的角度其基本概念与 JMS 1.1 规范是一致的。消息传送模型点对点模型（Point to Point）使用队列（Queue）作为消息通信载体，满足生产者与消费者模式，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。发布订阅模型（Pub/Sub）使用主题作为消息通信载体，类似于广播模式，发布者发布一条消息，该消息通过主题传递给所有的订阅者，在一条消息广播之后才订阅的用户则是收不到该条消息的。基本组件ActiveMQ 使用时包含的基本组件各与 JMS 是相同的：Broker，消息代理，表示消息队列服务器实体，接受客户端连接，提供消息通信的核心服务。Producer，消息生产者，业务的发起方，负责生产消息并传输给 Broker 。Consumer，消息消费者，业务的处理方，负责从 Broker 获取消息并进行业务逻辑处理。Topic，主题，发布订阅模式下的消息统一汇集地，不同生产者向 Topic 发送消息，由 Broker 分发到不同的订阅者，实现消息的广播。Queue，队列，点对点模式下特定生产者向特定队列发送消息，消费者订阅特定队列接收消息并进行业务逻辑处理。Message，消息体，根据不同通信协议定义的固定格式进行编码的数据包，来封装业务 数据，实现消息的传输。由于这些概念在 JMS 中已介绍过，这里不再详细介绍。连接器ActiveMQ Broker 的主要作用是为客户端应用提供一种通信机制，为此 ActiveMQ 提供了一种连接机制，并用连接器（connector）来描述这种连接机制。ActiveMQ 中连接器有两种，一种是用于客户端与消息代理服务器（client-to-broker）之间通信的传输连接器（transport connector），一种是用于消息代理服务器之间（broker-to-broker）通信的网络连接器（network connector）。connector 使用 URI（统一资源定位符）来表示，URI 格式为：&lt;schema name&gt;:&lt;hierarchical part&gt;[?&lt;query&gt;][#&lt;fragment&gt;]schema name 表示协议，例如：foo://username:password@example.com:8042/over/there/index.dtb?type=animal&amp;name=narwhal#nose其中 schema name 部分是 foo，hierarchical part 是 username:password@example.com:8042/over/there/index.dtb，query 是 type=animal&amp;name=narwhal，fragment 是 nose。传输连接器为了交换消息，消息生产者和消息消费者（统称为客户端）都需要连接到消息代理服务器，这种客户端和消息代理服务器之间的通信就是通过传输连接器（Transport connectors）完成的。很多情况下用户连接消息代理时的需求侧重点不同，有的更关注性能，有的更注重安全性，因此 ActiveMQ 提供了一系列l连接协议供选择，来覆盖这些使用场景。从消息代理的角度看，传输连接器就是用来处理和监听客户端连接的，查看 ActiveMQ demo 的配置文件（/examples/conf/activemq-demo.xml），传输连接的相关配置如下： &lt;transportConnectors&gt; &lt;transportConnector name=“openwire” uri=“tcp://localhost:61616” discoveryUri=“multicast://default”/&gt; &lt;transportConnector name=“ssl” uri=“ssl://localhost:61617”/&gt; &lt;transportConnector name=“stomp” uri=“stomp://localhost:61613”/&gt; &lt;transportConnector name=“ws” uri=“ws://localhost:61614/“ /&gt; &lt;/transportConnectors&gt;传输连接器定义在&lt;transportConnectors&gt;元素中，一个&lt;transportConnector&gt;元素定义一个特定的连接器，一个连接器必须有自己唯一的名字和 URI 属性，但discoveryUri属性是可选的。目前在 ActiveMQ 最新的5.15版本中常用的传输连接器连接协议有：vm、tcp、udp、multicast、nio、ssl、http、https、websocket、amqp、mqtt、stomp 等等vm，允许客户端和消息服务器直接在 VM 内部通信，采用的连接不是 Socket 连接，而是直接的虚拟机本地方法调用，从而避免网络传输的开销。应用场景仅限于服务器和客户端在同一 JVM 中。tcp，客户端通过 TCP 连接到远程的消息服务器。udp，客户端通过 UDP 连接到远程的消息服务器。multicast，允许使用组播传输的方式连接到消息服务器。nio，nio 和 tcp 的作用是一样的，只不过 nio 使用了 java 的 NIO包，这可能在某些场景下可提供更好的性能。ssl，ssl 允许用户在 TCP 的基础上使用 SSL 。http 和 https，允许客户端使用 REST 或 Ajax 的方式进行连接，这意味着可以直接使用 Javascript 向 ActiveMQ 发送消息。websocket，允许客户端通过 HTML5 中的 WebSocket 方式连接到消息服务器。amqp，5.8版本开始支持。mqtt、stomp，5.6版本开始支持。每个协议的具体配置见官网（http://activemq.apache.org/uri-protocols.html ）。除了以上这些基本协议之外 ActiveMQ 还支持一些高级协议也可以通过 URI 的方式进行配置，比如 Failover 和 Fanout 。Failover 是一种重新连接的机制，工作于上面介绍的连接协议的上层，用于建立可靠的传输。其配置语法允许制定任意多个复合的 URI ，它会自动选择其中的一个 URI 来尝试建立连接，如果该连接没有成功，则会继续选择其它的 URI 来尝试。配置语法例如：failover:(tcp://localhost:61616,tcp://remotehost:61616)?initialReconnectDelay=100Fanout 是一种重新连接和复制的机制，它也工作于其它连接的上层，采用复制的方式把消息复制到多个消息服务器。配置语法例如：fanout:(tcp://localhost:61629,tcp://localhost:61639,tcp://localhost:61649)网络连接器很多情况下，我们要处理的数据可能是海量的，这种场景单台服务器很难支撑，这就要用到集群功能，为此 ActiveMQ 提供了网络连接的模式，简单说就是通过把多个消息服务器实例连接在一起作为一个整体对外提供服务，从而提高整体对外的消息服务能力。通过这种方式连接在一起的服务器实例之间可共享队列和消费者列表，从而达到分布式队列的目的，网络连接器就是用来配置服务器之间的通信。使用网络连接器的简单场景) 如图所示，服务器 S1 和 S2 通过 NewworkConnector 相连，生产者 P1 发送的消息，消费者 C3 和 C4 都可以接收到，而生产者 P3 发送的消息，消费者 C1 和 C2 也可以接收到。要使用网络连接器的功能需要在服务器 S1 的 activemq.xml 中的 broker 节点下添加如下配置（假设192.168.11.23:61617 为 S2 的地址）：&lt;networkConnectors&gt; &lt;networkConnector uri=“static:(tcp://192.168.11.23:61617)”/&gt;&lt;/networkConnectors&gt;如果只是这样，S1 可以将消息发送到 S2，但这只是单方向的通信，发送到 S2 上的的消息还不能发送到 S1 上。如果想 S1 也收到从 S2 发来的消息需要在 S2 的 activemq.xml 中的 broker 节点下也添加如下配置（假设192.168.11.45:61617为 S1 的地址）：&lt;networkConnectors&gt; &lt;networkConnector uri=“static:(tcp://192.168.11.45:61617)”/&gt;&lt;/networkConnectors&gt;这样，S1和S2就可以双向通信了。目前在 ActiveMQ 最新的5.15版本中常用的网络连接器协议有 static 和 multicast 两种。static，静态协议，用于为一个网络中多个代理创建静态配置，这种配置协议支持复合的 URI （即包含其他 URI 的 URI）。例如static://(tcp://ip:61616,tcp://ip2:61616)multicast，多点传送协议，消息服务器会广播自己的服务，也会定位其他代理。这种方式用于服务器之间实现动态识别，而不是配置静态的 IP 组。对这块感兴趣的话可以看官方文档：http://activemq.apache.org/networks-of-brokers.html消息存储JMS 规范中消息的分发方式有两种：非持久化和持久化。对于非持久化消息 JMS 实现者须保证尽最大努力分发消息，但消息不会持久化存储；而持久化方式分发的消息则必须进行持久化存储。非持久化消息常用于发送通知或实时数据，当你比较看重系统性能并且即使丢失一些消息并不影响业务正常运作时可选择非持久化消息。持久化消息被发送到消息服务器后如果当前消息的消费者并没有运行则该消息继续存在，只有等到消息被处理并被消息消费者确认之后，消息才会从消息服务器中删除。对以上这两种方式 ActiveMQ 都支持，并且还支持通过缓存在内存中的中间状态消息的方式来恢复消息。概括起来看 ActiveMQ 的消息存储有三种：存储到内存、存储到文件、存储到数据库。具体使用上 ActiveMQ 提供了一个插件式的消息存储机制，类似于消息的多点传播，主要实现了如下几种：AMQ，是 ActiveMQ 5.0及以前版本默认的消息存储方式，它是一个基于文件的、支持事务的消息存储解决方案。在此方案下消息本身以日志的形式实现持久化，存放在 Data Log 里。并且还对日志里的消息做了引用索引，方便快速取回消息。KahaDB，也是一种基于文件并具有支持事务的消息存储方式，从5.3开始推荐使用 KahaDB 存储消息，它提供了比 AMQ 消息存储更好的可扩展性和可恢复性。JDBC，基于 JDBC 方式将消息存储在数据库中，将消息存到数据库相对来说比较慢，所以 ActiveMQ 建议结合 journal 来存储，它使用了快速的缓存写入技术，大大提高了性能。内存存储，是指将所有要持久化的消息放到内存中，因为这里没有动态的缓存，所以需要注意设置消息服务器的 JVM 和内存大小。LevelDB，5.6版本之后推出了 LevelDB 的持久化引擎，它使用了自定义的索引代替常用的 BTree 索引，其持久化性能高于 KahaDB，虽然默认的持久化方式还是 KahaDB，但是 LevelDB 将是趋势。在5.9版本还提供了基于 LevelDB 和 Zookeeper 的数据复制方式，作为 Master-Slave 方式的首选数据复制方案。工程实例Java 访问 ActiveMQ 实例在 JMS 规范中传递消息的方式有两种，一种是点对点模型的队列（Queue）方式，另一种是发布订阅模型的主题（Topic）方式。下面看下用 ActiveMQ 以主题方式传递消息的 Java 示例。引入依赖Java 工程中需要引入 ActiveMQ 包的依赖，jar 包版本同你安装 ActiveMQ 版本一致即可： &lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-all&lt;/artifactId&gt; &lt;version&gt;5.15.2&lt;/version&gt; &lt;/dependency&gt;消息生产者package org.study.mq.activeMQ;import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.;public class TopicPublisher { /** 默认用户名 / public static final String USERNAME = ActiveMQConnection.DEFAULT_USER; /** 默认密码 / public static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD; /** 默认连接地址 / public static final String BROKER_URL = ActiveMQConnection.DEFAULT_BROKER_URL; public static void main(String[] args) { //创建连接工厂 ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKER_URL); try { //创建连接 Connection connection = connectionFactory.createConnection(); //开启连接 connection.start(); //创建会话，不需要事务 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); //创建 Topic，用作消费者订阅消息 Topic myTestTopic = session.createTopic(“activemq-topic-test1”); //消息生产者 MessageProducer producer = session.createProducer(myTestTopic); for (int i = 1; i &lt;= 3; i++) { TextMessage message = session.createTextMessage(“发送消息 “ + i); producer.send(myTestTopic, message); } //关闭资源 session.close(); connection.close(); } catch (JMSException e) { e.printStackTrace(); } }}在 Topic 模式中消息生产者是用于发布消息的，绝大部分代码与 Queue 模式中相似，不同的是本例中基于 Session 创建的是主题（Topic），该主题作为消费者消费消息的目的地。消息消费者package org.study.mq.activeMQ;import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.;public class TopicSubscriber { / 默认用户名 / public static final String USERNAME = ActiveMQConnection.DEFAULT_USER; / 默认密码 / public static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD; /* 默认连接地址 / public static final String BROKER_URL = ActiveMQConnection.DEFAULT_BROKER_URL; public static void main(String[] args) { //创建连接工厂 ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKER_URL); try { //创建连接 Connection connection = connectionFactory.createConnection(); //开启连接 connection.start(); //创建会话，不需要事务 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); //创建 Topic Topic myTestTopic = session.createTopic(“activemq-topic-test1”); MessageConsumer messageConsumer = session.createConsumer(myTestTopic); messageConsumer.setMessageListener(new MessageListener() { @Override public void onMessage(Message message) { try { System.out.println(“消费者1 接收到消息：” + ((TextMessage) message).getText()); } catch (JMSException e) { e.printStackTrace(); } } }); MessageConsumer messageConsumer2 = session.createConsumer(myTestTopic); messageConsumer2.setMessageListener(new MessageListener() { @Override public void onMessage(Message message) { try { System.out.println(“消费者2 接收到消息：” + ((TextMessage) message).getText()); } catch (JMSException e) { e.printStackTrace(); } } }); MessageConsumer messageConsumer3 = session.createConsumer(myTestTopic); messageConsumer3.setMessageListener(new MessageListener() { @Override public void onMessage(Message message) { try { System.out.println(“消费者3 接收到消息：” + ((TextMessage) message).getText()); } catch (JMSException e) { e.printStackTrace(); } } }); //让主线程休眠100秒，使消息消费者对象能继续存活一段时间从而能监听到消息 Thread.sleep(100 1000); //关闭资源 session.close(); connection.close(); } catch (Exception e) { e.printStackTrace(); } }}为了展示主题模式中消息广播给多个订阅者的功能，这里创建了三个消费者对象并订阅了同一个主题，比较特殊的是最后让主线程休眠了一段时间，这么做的目的是让消费者对象能继续存活，从而使控制台能打印出监听到的消息内容。启动 ActiveMQ 服务器在 ActiveMQ 的 bin 目录下直接执行activemq start即启动了 ActiveMQ运行 TopicSubscriber需要先运行 TopicSubscriber 类的 main 方法，这样发布者发布消息的时候订阅者才能接收到消息，如果将执行顺序倒过来则消息先发布出去但没有任何订阅者在运行，则看不到消息被消费了。运行 TopicPublisher接着运行 TopicPublisher 类的 main 方法，向主题中发布3条消息，然后可以在 TopicSubscriber 后台看到接收到的消息内容：消费者接收到消息Spring 整合 ActiveMQ在实际项目中如果使用原生的 ActiveMQ API 开发显然比较啰嗦，这中间创建连接工厂、创建连接之类代码完全可以抽取出来由框架统一做，这些事情 Spring 也想到了并帮我们做了。ActiveMQ 完全支持基于 Spring 的方式 配置 JMS 客户端和服务器，下面的例子展示一下在 Spring 中如何使用队列模式和主题模式传递消息。引入依赖&lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-all&lt;/artifactId&gt; &lt;version&gt;5.15.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;version&gt;4.3.10.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt; &lt;version&gt;5.15.0&lt;/version&gt;&lt;/dependency&gt;工程中除了 activemq 的包之外还要添加 Spring 支持 JMS 的包。由于 connection、session、producer 的创建会消耗大量系统资源，为此这里使用 连接池 来复用这些资源，所以还要添加 activemq-pool 的依赖。Spring 配置文件&lt;?xml version=“1.0” encoding=“UTF-8”?&gt;&lt;beans xmlns=“http://www.springframework.org/schema/beans“ xmlns:xsi=“http://www.w3.org/2001/XMLSchema-instance“ xmlns:context=“http://www.springframework.org/schema/context“ xsi:schemaLocation=“ http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd“&gt; &lt;context:component-scan base-package=“org.study.mq.activeMQ.spring”/&gt; &lt;bean id=“jmsFactory” class=“org.apache.activemq.pool.PooledConnectionFactory” destroy-method=“stop”&gt; &lt;property name=“connectionFactory”&gt; &lt;bean class=“org.apache.activemq.ActiveMQConnectionFactory”&gt; &lt;property name=“brokerURL”&gt; &lt;value&gt;tcp://localhost:61616&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/property&gt; &lt;property name=“maxConnections” value=“100”&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=“cachingConnectionFactory” class=“org.springframework.jms.connection.CachingConnectionFactory”&gt; &lt;property name=“targetConnectionFactory” ref=“jmsFactory”/&gt; &lt;property name=“sessionCacheSize” value=“1”/&gt; &lt;/bean&gt; &lt;bean id=“jmsTemplate” class=“org.springframework.jms.core.JmsTemplate”&gt; &lt;property name=“connectionFactory” ref=“cachingConnectionFactory”/&gt; &lt;property name=“messageConverter”&gt; &lt;bean class=“org.springframework.jms.support.converter.SimpleMessageConverter”/&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=“testQueue” class=“org.apache.activemq.command.ActiveMQQueue”&gt; &lt;constructor-arg name=“name” value=“spring-queue”/&gt; &lt;/bean&gt; &lt;bean id=“testTopic” class=“org.apache.activemq.command.ActiveMQTopic”&gt; &lt;constructor-arg index=“0” value=“spring-topic”/&gt; &lt;/bean&gt; &lt;bean id=“queueListener” class=“org.study.mq.activeMQ.spring.QueueListener”/&gt; &lt;bean id=“topic1Listener” class=“org.study.mq.activeMQ.spring.Topic1Listener”/&gt; &lt;bean id=“topic2Listener” class=“org.study.mq.activeMQ.spring.Topic2Listener”/&gt; &lt;bean id=“queueContainer” class=“org.springframework.jms.listener.DefaultMessageListenerContainer”&gt; &lt;property name=“connectionFactory” ref=“cachingConnectionFactory”/&gt; &lt;property name=“destination” ref=“testQueue”/&gt; &lt;property name=“messageListener” ref=“queueListener”/&gt; &lt;/bean&gt; &lt;bean id=“topic1Container” class=“org.springframework.jms.listener.DefaultMessageListenerContainer”&gt; &lt;property name=“connectionFactory” ref=“cachingConnectionFactory”/&gt; &lt;property name=“destination” ref=“testTopic”/&gt; &lt;property name=“messageListener” ref=“topic1Listener”/&gt; &lt;/bean&gt; &lt;bean id=“topic2Container” class=“org.springframework.jms.listener.DefaultMessageListenerContainer”&gt; &lt;property name=“connectionFactory” ref=“cachingConnectionFactory”/&gt; &lt;property name=“destination” ref=“testTopic”/&gt; &lt;property name=“messageListener” ref=“topic2Listener”/&gt; &lt;/bean&gt;&lt;/beans&gt;下面的项目示例中的 Java 代码采用注解的方式，这也是现在很多程序员的习惯用法，所以在配置文件一开始定义注解扫描包路径org.study.mq.activeMQ.spring，您可以根据自己实际情况修改包名称，本例中的所有 Java 代码都放在该包之下。接下来定义了一个 JMS 工厂 bean，采用的是池化连接工厂类org.apache.activemq.pool.PooledConnectionFactory，实际就是对内部的 ActiveMQ 连接工厂增加了连接池的功能，从其内部配置可以看到就是对org.apache.activemq.ActiveMQConnectionFactory的功能封装，而ActiveMQConnectionFactory类则比较熟悉了，就是上面 Java 访问 ActiveMQ 示例一开始创建连接工厂时使用的类。brokerURL 属性配置的就是连接服务器的协议和服务器地址。接下来的 cachingConnectionFactory 是实际项目代码中常用的，对连接工厂的又一层增强，使用连接的缓存功能以提升效率，读者可酌情选择使用。jmsTemplate 就是 Spring 解决 JMS 访问时冗长重复代码的方案，它需要配置的两个主要属性是 connectionFactory 和 messageConverter，通过 connectionFactory 获取连接、会话等对象，messageConverter 则是配置消息转换器，因为通常消息在发送前和接收后都需要进行一个前置和后置处理，转换器便进行这个工作。这样实际代码直接通过 jmsTemplate 来发送和接收消息，而每次发送接收消息时创建连接工厂、创建连接、创建会话等工作都由 Spring 框架做了。有了 JMS 模板还需要知道队列和主题作为实际发送和接收消息的目的地，所以接下来定义了 testQueue 和 testTopic 作为两种模式的示例。而异步接收消息时则需要提供 MessageListener 的实现类，所以定义了 queueListener 作为队列模式下异步接收消息的监听器，topic1Listener 和 topic2Listener 作为主题模式下异步接收消息的监听器，主题模式用两个监听器是为了演示多个消费者时都能收到消息。最后的 queueContainer、topic1Container、topic2Container 用于将消息监听器绑定到具体的消息目的地上。消息服务类下面是使用 JMS 模板处理消息的消息服务类package org.study.mq.activeMQ.spring;import org.springframework.jms.core.JmsTemplate;import org.springframework.jms.core.MessageCreator;import org.springframework.stereotype.Service;import javax.annotation.Resource;import javax.jms.*;@Servicepublic class MessageService { @Resource(name = “jmsTemplate”) private JmsTemplate jmsTemplate; @Resource(name = “testQueue”) private Destination testQueue; @Resource(name = “testTopic”) private Destination testTopic; //向队列发送消息 public void sendQueueMessage(String messageContent) { jmsTemplate.send(testQueue, new MessageCreator() { @Override public Message createMessage(Session session) throws JMSException { TextMessage msg = session.createTextMessage(); // 设置消息内容 msg.setText(messageContent); return msg; } }); } //向主题发送消息 public void sendTopicMessage(String messageContent) { jmsTemplate.send(testTopic, new MessageCreator() { @Override public Message createMessage(Session session) throws JMSException { TextMessage msg = session.createTextMessage(); // 设置消息内容 msg.setText(messageContent); return msg; } }); }}@Service 将该类声明为一个服务，实际项目中很多服务代码也类似。通过 Resource 注解直接将上面配置文件中定义的 jmsTemplate 引入到 MessageService 类中就可以直接使用了，testQueue 和 testTopic 也是类似，服务类中直接引入配置文件中定义好的队列和主题。重点是下面的两个发送消息的方法，sendQueueMessage 向队列发送消息，sendTopicMessage 向主题发送消息，两种模式都使用了 jmsTemplate 的 send 方法，send 方法第1个参数是javax.jms.Destination类型，表示消息目的地。由于javax.jms.Queue和javax.jms.Topic都继承了javax.jms.Destination接口，所以该方法对队列模式和主题模式都适用。send 方法的第2个参数是org.springframework.jms.core.MessageCreator，这里使用了匿名内部类的方式创建对象，从支持的 Session 对象中创建文本消息，这样就可以发送消息了。可以看到无论是队列还是主题，通过 Spring 框架来发送消息的代码比之前的 Java 代码示例简洁了很多。消息监听器类package org.study.mq.activeMQ.spring;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;public class QueueListener implements MessageListener { @Override public void onMessage(Message message) { if (message instanceof TextMessage) { try { TextMessage txtMsg = (TextMessage) message; String messageStr = txtMsg.getText(); System.out.println(“队列监听器接收到文本消息：” + messageStr); } catch (JMSException e) { e.printStackTrace(); } } else { throw new IllegalArgumentException(“只支持 TextMessage 类型消息！”); } }}队列消息监听器在收到消息时校验是否是文本消息类型，是的话则打印出内容。package org.study.mq.activeMQ.spring;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;public class Topic1Listener implements MessageListener { @Override public void onMessage(Message message) { if (message instanceof TextMessage) { try { TextMessage txtMsg = (TextMessage) message; String messageStr = txtMsg.getText(); System.out.println(“主题监听器1 接收到文本消息：” + messageStr); } catch (JMSException e) { e.printStackTrace(); } } else { throw new IllegalArgumentException(“只支持 TextMessage 类型消息！”); } }}package org.study.mq.activeMQ.spring;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;public class Topic2Listener implements MessageListener { @Override public void onMessage(Message message) { if (message instanceof TextMessage) { try { TextMessage txtMsg = (TextMessage) message; String messageStr = txtMsg.getText(); System.out.println(“主题监听器2 接收到文本消息：” + messageStr); } catch (JMSException e) { e.printStackTrace(); } } else { throw new IllegalArgumentException(“只支持 TextMessage 类型消息！”); } }}主题监听器的代码与队列监听器类似，只是打印时通过不同字符串表示当前是不同监听器接收的消息。启动应用为了演示例子，写了一个 StartApplication 类，在 main 方法中加载 Spring ，获取到 MessageService 服务之后调用 sendQueueMessage 和 sendTopicMessage 方法发送消息。package org.study.mq.activeMQ.spring;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class StartApplication { public static void main(String[] args) { ApplicationContext ctx = new ClassPathXmlApplicationContext(“spring-context.xml”); MessageService messageService = (MessageService) ctx.getBean(“messageService”); messageService.sendQueueMessage(“我的测试消息1”); messageService.sendTopicMessage(“我的测试消息2”); messageService.sendTopicMessage(“我的测试消息3”); }}启动好 activeMQ 服务之后运行 StartApplication 类，在控制台看到接收到文本消息：接收到文本消息队列监听器监听到了一条消息，两个主题监听器分别监听到了两条消息。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Struts2]]></title>
    <url>%2F2015%2F12%2F17%2Fstruts2%2F</url>
    <content type="text"><![CDATA[Struts2一、框架概述什么是框架，为什么使用框架，框架优点框架（framework）是一个基本概念上的结构，用于去解决或者处理复杂的问题框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。框架是在特定的领域内解决问题。优点重用代码大大增加，软件生产效率和质量也得到了提高使用框架开发，它提供统一的标准，大大降低了我们的后期维护。学习框架重点:了解框架做了什么，我们要在这个基础上在做什么事情。 二、java开发中常用框架SSH (SSM SSI)SSH struts2 spring hibernateSSM(SSI) springmvc spring mybatis(ibatis) SSH 它是企业开发中比较主流的一套架构。SSH框架在开发中所处的位置: 三、Struts2框架介绍什么是struts2框架，学习struts2框架的核心。Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互Struts2=struts1+webwork 问题:struts2是一个mvc框架，它的mvc是什么? javaweb开发中的mvc,是在jsp的model2模式中提过Model——javabeanView——–jspController—-servlet 核心点:1.拦截器 interceptor2.Action3.ognl与valueStack 在现在开发中与struts2比较类似的框架有哪些?Struts1 webwork springmvc jsf Struts2框架流程 四、Struts2框架执行流程1．Struts2源码导入 对于struts2框架它的源代码我们主要使用三部分1.struts2核心部分源代码 org.apache.struts2xxsrc\core\src\main\java2.struts2的xwork核心部分源代码src\xwork-core\src\main\java\com\opensymphony\xwork23.struts2的插件的源代码src\plugins2．关于struts.xml配置文件中提示问题第一步在eclipse的window下首选面中查找xml catalog第二步Location:配置本地的dtd文件路径key type:选择URIKey: http://struts.apache.org/dtds/struts-2.3.dtd注意版本要对应，如果你可以上网，那么会自动缓存dtd,具有提示功能。 3．执行流程介绍1.当通过浏览器发送一个请求2.会被StrutsPrepareAndExecuteFilter拦截3.会调用strtus2框架默认的拦截器(interceptor)完成部分功能4.在执行Action中操作5.根据Action中方法的执行结果来选择来跳转页面Resutl视图 一般管StrutsPrepareAndExecuteFilter 叫做前端控制器(核心控制器)，只有配置了这个filter我们的strtus2框架才能使用。Strtus2的默认拦截器(interceptor)它们是在struts-default.xml文件中配置注意:这上xml文件是在strtus-core.jar包中。默认的拦截器是在defaultStack中定义的。 五、Struts2配置详解1．Struts2配置文件加载顺序 第一个加载的是default.properties文件位置:strtus2-core.jar包 org.apache.struts2包下作用:主要是声明了struts2框架的常量第二个加载的是一批配置文件Strtus-default.xml位置:struts2-corl.jar作用:声明了interceptor result beanStrtus-plugin.xml位置:在strtus2的插件包中作用:主要用于插件的配置声明Strtus.xml位置:在我们自己的工程中作用:用于我们自己工程使用strtus2框架的配置第三个加载的是自定义的strtus.properties位置:都是在自己工程的src下作用:定制常量第四自定义配置提供第五加载的是web.xml配置文件主要是加载strtus2框架在web.xml文件中的相关配置.第六 bean相关配置 重点掌握:1.Default.properties2.Struts-default.xml3.Struts-plugin.xml4.Strtus.xml5.web.xml 2．struts.xml文件配置介绍2.1．package配置1.name属性 作用:定义一个包的名称，它必须唯一。2.namespace属性 作用:主要是与action标签的name属性联合使用来确定一个action 的访问路径3.extends属性 作用:指定继承自哪个包。一般值是strtus-default strtus-default包是在strtus-default.xml文件中声明的。4.abstruct属性 它代表当前包是一个抽象的，主要是用于被继承2.2．action配置1.name属性 作用:主要是与package的namespace联合使用来确定一个action的访问路 径2.class属性 作用:用于指示当前的action类3.method属性 作用:用于指示当前的action类中的哪个方法执行2.3．result配置它主要是用于指示结果视图1.name属性 作用是与action类的method方法的返回值进行匹配，来确定跳转路径2.type属性 作用是用于指定跳转方式2.4．扩展关于action配置中的class与method的默认值以及result中的name与type 默认值问题 原因:strtus-default.xml文件中配置 它的作用就是当一个请求来时，如果查找不到指定的class及对应的method就会执行ActionSupport类中的execute方法。在这个类的execute方法中默认返回的是”success”也就是说，result的name属性默认值是success,默认的跳转方式是请求转发 dispatcher 3．常量配置default.properties文件中定义了struts2框架常用常量 .问题:我们怎样可以定义常量1.可以在src下创建一个strtus.properties配置文件2.可以在web.xml文件中配置3.可以直接在strtus.xml文件中定义常量 (推荐) 注意:后加载的配置文件中的常量会将先加载的常量覆盖 六、Struts2的Action详解Struts2中的action，主要是完成业务逻辑操作。Action替代在servlet中完成的作用。Action的学习主要有两点1.如何创建一个struts2的action2.如果访问一个struts2的action 1．Action类创建方式(三种)1.创建一个pojo类Pojo(plani Ordinary java object)简单的java对象Pojo类就是没有实现任何接口没有继承任何类优点:无耦合缺点:所有的功能都要自己完成 2.创建一个类实现一个Action接口com.opensymphony.xwork2.Action 在Action接口中定义了五个常量，一个execute方法五个常量:它们是默认的五个结果视图:ERROR : 错误视图INPUT: 它是struts2框架中interceptor中发现问题后会访问的一个视图LOGIN:它是一个登录视图，可以在权限操作中使用NONE:它代表的是null,什么都不做（也不会做跳转操作）SUCCESS:这是一个成功视图优点：耦合度低缺点:还是需要自己来完成功能 3.创建一个类继承ActionSupport类com.opensymphony.xwork2.ActionSupportActionSupport类也实现了Action接口。我们在开发中一般会使用这种方案:优点:具有丰富的功能，例如 表单校验 错误信息设置 国际化缺点:耦合度高2．action的访问方式1.直接通过标签来配置，通过method来指定访问的方法，如果method没有，默认访问的是execute方法。2.简化的action访问方式，可以使用通配符来访问。这种方式的缺点:不建议使用过多的号，它带来程序阅读障碍，不便于理解使用*来简化操作方案，它对名称规范必须进行一个统一。 3．扩展–动态方法调用 这是strtus2提供的动态方法调用。 注意:对于strtus2的动态方法调用，要想使用我们必须配置一个常量来开启动态方法调用 这代表动态方法调用没有开启 个人不建议使用动态方法调用 七、Struts2框架封装数据主要解决的问题:是在action中如果获取请求参数 主要有两种方式:1.属性驱动a.直接在action类中提供与请求参数匹配属性，提供get/set方法b.在action类中创始一个javaBean,对其提供get/set ，在请求时页面上要进行修改， 例如 user.username user.password ,要使用ognl表达式以上两种方式的优缺点:第一种比较简单，在实际操作我们需要将action的属性在赋值给模型(javaBean) 去操作 第二种:不需要在直接将值给javaBean过程，因为直接将数据封装到了javaBean 中。它要求在页面上必须使用ognl表达式，就存在页面不通用问题。 2.模型驱动步骤:1.让Action类要实现一个指定接口ModelDriven2.实例化模型对象(就是要new出来javaBean)3.重写getModel方法将实例化的模型返回。 对于模型驱动它与属性驱动对比，在实际开发中使用比较多，模型驱动缺点，它只能对 一个模型数据进行封装。 八、总结1.关于strtus2框架的环境搭建2.关于strtus2框架配置3.关于strtus2框架请求参数封装4.关于strtus2框架的路径跳转 关于action访问的配置 路径 关于路径跳转问题:是通过来配置跳转的路径.它的name属性是与action中的方法的返回值进行对比的。它的type属性可以取哪些值? 默认值是dispatcher 它代表的是请求转发。针对于jsp页面redirect 它代表的是重定向 针对于jsp页面chain 它类似于请示转发，只不过它是针对于action跳转.redirectAction 它类似于重定向 针对于action关于路径跳转的配置可以直接在下创建全局的result]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器插件的使用教程]]></title>
    <url>%2F2015%2F09%2F23%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[浏览器插件的使用教程安装油猴插架 [下载安装][http://www.tampermonkey.net] 选择和你浏览器对应的插架，如下图 安装成功后可以在浏览器插件（扩展）中看到油猴，如下图 使用油猴安装插件 点击油猴图标可以打开油猴的控制面板，如下图 点击[获取新脚本][http://tampermonkey.net/scripts.php] 选择脚本网站，推荐使用GreasyFork 选择要安装的脚本 在首页点击脚本列表 选择你需要的脚本点击安装 点击进行安装，如下图 安装成功后可以在油猴面板查看 插件可根据自己的需求安装，在脚本列表中可以看到很多有意思的插件 举例：查看VIP视频 安装VIP视频在线解析插件 打开视频网站，播放视频，可看到插件，如下图 解析VIP 视频的插件很多，选一个可以用的即可，也可以安装多个插件的作用只是]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>浏览器插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux]]></title>
    <url>%2F2015%2F09%2F21%2FLinux%2F</url>
    <content type="text"><![CDATA[Linux学习初学者必备 Linux常用命令 01-Linux的简介.avi什么是LinuxLinux是基于Unix的,是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux的应用服务器系统: Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等嵌入式系统: 路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等高性能运算、计算密集型应用 Linux有强大的运算能力桌面应用系统移动手持系统Linux的主流版本Ubuntu, Centos, redhat, fedora, freebsd… 02-虚拟软件的安装.avi安装参考《虚拟软件vmware安装.doc》 03-CentOS的安装.avi参考《CentOS6详细安装文档.doc》 04-Linux的目录结构.avi 05-Linux的常用命令：cd命令.avi==切换目录==cd app 切换到app目录cd .. 切换到上一层目录cd / 切换到系统根目录cd ~ 切换到用户主目录cd - 切换到上一个所在目录 06-Linux的常用命令：ls、ll、dir命令.avi==列出文件列表==ls(list)是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容格式：ls[参数] [路径或文件名] 在linux中以 . 开头的文件都是隐藏的文件lsls -a 显示所有文件或目录（包含隐藏的文件）ls -l 缩写成ll 07-Linux的常用命令：mkdir、rmdir命令.avi==创建目录==mkdir app 在当前目录下创建app目录mkdir –p app2/test 级联创建aap2以及test目==移除目录==rmdir(remove directory)命令可用来删除“空”的子目录rmdir app 删除app目录 08-Linux的常用命令：cat、more、less、tail命令.avi浏览文件 cat 用于显示文件的内容格式：cat[参数]&lt;文件名&gt;cat yum.conf more 一般用于要显示的内容会超过一个画面长度的情况。按空格键显示下一个画面。回车显示下一行内容。按 q 键退出查看。more yum.conf 空格显示下一页数据 回车显示下一行的数据 less 用法和more类似，不同的是less可以通过PgUp、PgDn键来控制less yum.conf PgUp 和 PgDn 进行上下翻页. tail命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。==tail -10 /etc/passwd 查看后10行数据==tail -f catalina.log ==动态查看日志==ctrl+c 结束查看 09-Linux的常用命令：rm命令.avi==文件删除操作==rm 删除文件rm a.txt 删除a.txt文件删除需要用户确认，y/n rm 删除不询问rm -f a.txt 不询问，直接删除 rm 删除目录rm -r a 递归删除不询问递归删除（慎用）rm -rf a 不询问递归删除rm -rf * 删除所有文件rm -rf /* 自杀 10-Linux的远程连接：CRT的软件的安装和使用.avi11-Linux的常用命令：cp、mv命令.avi文件的拷贝和剪切cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。cp a.txt b.txt 将a.txt复制为b.txt文件cp a.txt ../ 将a.txt文件复制到上一层目录中 mv 移动或者重命名mv a.txt ../ 将a.txt文件移动到上一层目录中mv a.txt b.txt 将a.txt文件重命名为b.txt 12-Linux的常用命令：tar命令.avi==打包或者解压==tar命令位于/bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。常用参数：-c:创建一个新tar文件-v:显示运行过程的信息-f:指定文件名-z:调用gzip压缩命令进行压缩-t:查看压缩文件的内容-x:解开tar文件 ==打包==tar –cvf xxx.tar ./*打包并且压缩：tar –zcvf xxx.tar.gz ./* ==解压==tar –xvf xxx.tartar -xvf xxx.tar.gz -C /usr/aaa 13-Linux的常用命令：grep命令.avigrep命令查找符合条件的字符串用法: grep [选项]… PATTERN [FILE]…示例：grep lang anaconda-ks.cfg 在文件中查找langgrep lang anaconda-ks.cfg –color 高亮显示 14-Linux的常用命令：其他常用命令.avi其他常用命令pwd 显示当前所在目录touch 创建一个空文件touch a.txtll -h 友好显示文件大小wget 下载资料 wget http://nginx.org/download/nginx-1.9.12.tar.gz 15-Linux的常用命令：VI和VIM编辑器.avi==Vi和Vim编辑器==在Linux下一般使用vi编辑器来编辑文件vi既可以查看文件也可以编辑文件三种模式：命令行、插入、底行模式切换到命令行模式：按Esc键切换到插入模式：按 i 、o、a键i 在当前位置生前插入I 在当前行首插入a 在当前位置后插入A 在当前行尾插入o 在当前行之后插入一行O 在当前行之前插入一行 切换到底行模式：按 :（冒号） 打开文件：vim file退出：esc :q修改文件：输入i进入插入模式保存并退出：esc :wq不保存退出：esc :q! 16-Linux的常用命令：重定向输出.avi&gt; 重定向输出，覆盖原有内容&gt;&gt; 重定向输出，又追加功能 cat /etc/passwd &gt; a.txt 将输出定向到a.txt中cat /etc/passwd &gt;&gt; a.txt 输出并且追加 ifconfig &gt; ifconfig.txt 17-Linux的常用命令：管道和命令执行控制.avi管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入 ls --help | more 分页查询帮助信息ps –ef | grep java 查询名称中包含java的进程ifconfig | morecat index.html | moreps –ef | grep aio 命令控制命令之间使用 &amp;&amp; 连接，实现逻辑与的功能只有在 &amp;&amp; 左边的命令返回真,&amp;&amp; 右边的命令才会被执行只要有一个命令返回假,后面的命令就不会被执行。mkdir test &amp;&amp; cd test 18-Linux的常用命令：网络通讯的命令.avi网络通讯命令ifconfig 显示或设置网络设备ifconfig eth0 up 启用eth0网卡ifconfig eth0 down 停用eth0网卡 ping 探测网络是否通畅。ping 192.168.0.1 netstat 查看网络端口。netstat -an | grep 3306 查询3306端口占用情况 19-Linux的常用命令：系统管理的命令.avi系统管理命令date 显示或设置系统时间date 显示当前系统时间date -s “2014-01-01 10:10:10“ 设置系统时间 df 显示磁盘信息df –h 友好显示大小 free 显示内存状态free –m 以mb单位显示内存组昂头 top 显示，管理执行中的程序 clear 清屏幕ps 正在运行的某个进程的状态ps –ef 查看所有进程ps –ef | grep ssh 查找某一进程 kill 杀掉某一进程kill 2868 杀掉2868编号的进程kill -9 2868 强制杀死进程 du 显示目录或文件的大小du –h 显示当前目录的大小who 显示目前登入系统的用户信息hostname 查看当前主机名修改：vi /etc/sysconfig/networkuname 显示系统信息。uname -a 显示本机详细信息依次为：内核名称(类别)，主机名，内核版本号，内核版本，内核编译日期，硬件名，处理器类型，硬件平台类型，操作系统名称 20-Linux的常用命令：用户管理的命令.avi用户管理命令useradd 添加一个用户useradd test 添加test用户useradd test -d /home/t1 指定用户home目录passwd 设置、修改密码passwd test 为test用户设置密码 切换登录：ssh -l test -p 22 192.168.19.128su – 用户名userdel 删除一个用户userdel test 删除test用户(不会删除home目录)userdel –r test 删除用户以及home目录 21-Linux的常用命令：组管理的命令.avi组管理命令当在创建一个新用户user时，若没有指定他所属于的组，就建立一个和该用户同名的私有组创建用户时也可以指定所在组groupadd 创建组groupadd public 创建一个名为public的组useradd u1 –g public 创建用户指定组 groupdel 删除组，如果该组有用户成员，必须先删除用户才能删除组。groupdel public 22-Linux的常用命令：权限管理.avi文件权限变更文件权限chmod 变更文件或目录的权限。chmod 755 a.txtchmod u=rwx,g=rx,o=rx a.txtchmod 000 a.txt / chmod 777 a.txt chown ==变更文件或目录改文件所属用户和组==chown u1:public a.txt ：变更当前的目录或文件的所属用户和组chown -R u1:public dir ：变更目录中的所有的子目录及文件的所属用户和组]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
