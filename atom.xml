<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wjlfun.info</title>
  
  <subtitle>云飞扬的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wjlfun.info/"/>
  <updated>2018-05-15T09:06:01.375Z</updated>
  <id>http://wjlfun.info/</id>
  
  <author>
    <name>吴金龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring ActiveMQ 整合（二）_ 重发机制</title>
    <link href="http://wjlfun.info/2016/04/12/Spring%20ActiveMQ%20%E6%95%B4%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89_%20%E9%87%8D%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://wjlfun.info/2016/04/12/Spring ActiveMQ 整合（二）_ 重发机制/</id>
    <published>2016-04-11T16:00:00.000Z</published>
    <updated>2018-05-15T09:06:01.375Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>&lt; p &gt; <span style="“font-family：'Microsoft" yahei';="" 字体大小：14px的的;="" “=""> [弹簧的ActiveMQ的整合（一）：一个简单的演示，测试消息的发送与接收＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt;/ span&gt; &lt;/ p&gt; &lt; p &gt; <span style="“font-family：'微软雅黑';" 字体大小：14px的的的;="" “="">＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; 。假如现在我手里有一个很重要，想要发给一个人，但是很不幸，消息发送失败了这时候怎么办，这时候我们可以利用的的ActiveMQ的＆NBSP;消息重发机制（RedeliveryPolicy）＆NBSP; 。来解决这个烦人的问题</span> &lt;/ p&gt; </span></p><p><span style="“font-family：'Microsoft" yahei';="" font-size：14px;”=""> &lt;/ span&gt; &gt; <h3> &lt;跨度风格=“font-family：’微软雅黑’; 字体大小：14px的的; “&gt;消息重发机制的实现：&lt;/ span&gt; &lt;/ h3&gt; <p> 1.写<span style="”font-family：'Microsoft" yahei';="" 字体大小：14px的;="" “="">”</span></p><p>  字体家庭： ‘微软雅黑’;字体大小：14px的; “&gt; RedeliveryPolicy &lt;/跨度&gt; &lt;/跨度&gt;配置文件&lt; BR &gt; &lt;/ p &gt; &lt; p &gt; &lt;跨度风格= ” font-family：“微软雅黑“;字体大小：14px的; “ &gt;＆nbsp;＆nbsp; ＆nbsp; ＆nbsp; ＆nbsp; ＆nbsp;既然&lt; span style = ” font-family：’Microsoft YaHei’; font-size：14px; “ &gt;<br>  在&lt; span  style = “ font-family：’Microsoft YaHei’; font-size：14px; ” &gt; <a 68488003="" href="“" http:="" blog.csdn.net="" dly1580854879="" article="" details="" ”target="“_" blank="" “="">弹簧ActiveMQ的整合（一）：一个简单的演示中，测试消息的发送与接收&lt;/一&gt; &lt;/跨度&gt;＆NBSP;的基础上，完善的ActiveMQ的XML配置文件即可。&lt;/跨度&gt; &lt;/ p &gt; &lt; p &gt; &lt; span style = “ font-family：’Microsoft YaHei’; font-size：14px; ” &gt;&lt;/ span &gt;</a></p><p> CopyToClipboard’，this）;返回false; “ &gt;复制 &lt;/ a &gt; &lt; div<br>     style=”position: absolute; left: 172px; top: 684px; width: 16px; height: 16px; z-index: 99;”&gt;<embed id="ZeroClipboardMovie_1" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_1" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=1&amp;width=16&amp;height=16" wmode="transparent" width="16" height="16" align="middle"><div style="position: absolute; left: 172px; top: 684px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_3" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="ZeroClipboardMovie_3" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=3&amp;width=16&amp;height=16" wmode="transparent" width="16" height="16" align="middle"></div></p></h3></span>&lt;span data-mod=”popu_169 “ &gt;  &lt; a  href = ”＃“  class = ” PrintSource “  title = ” print “  onclick = ” dp.sh.Toolbar.Command（’PrintSource’，this）; return false; “ &gt; print &lt;/ a &gt; &lt;/ span &gt; &lt; a  href = ”＃“  class = ” About “  title = ”？“ “ dp.sh.Toolbar.Command（’About’，this）; return false; ” &gt;？&lt;/ a &gt; &lt;/ div &gt; &lt;/ div &gt; &lt; ol  start = “ 1 ”  class = “ dp-xml ” &gt; &lt; li  class =“alt” &gt; <span> <span>＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt; &gt; &lt;/ li &gt; <li class="“”"> <span> <span class="“tag”">＆lt; &lt;/ span &gt; <span class="“tag-name”"> span &lt;/ span &gt; <span>＆nbsp; &lt;/ span &gt; <span class="“attribute”"> span &gt; <span>  = &lt;<span class="“attribute-value”"> “font-family：’Microsoft＆nbsp; 雅黑’;“&lt;/ span &gt; <span class="”tag“">＆gt; &lt;/ span &gt; <span>＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt;/ span &gt; &lt;标签“ &gt;＆lt; / span &gt; <span class="“tag”">＆gt; / &lt;/ span &gt; <span class="“tag-name”"> span &lt;/ span &gt; &lt;/ span &gt; <span class="“comment”">定义重新传递（重发机制）机制＆NBSP; ，重发时间间隔是100毫秒，最大重发次数是3次＆NBSP; HTTP://www.kuqin.COM/shuoit/20140419/339344.html＆NBSP;  - ＆GT; &lt;/ span &gt; <span>＆nbsp; ＆NBSP; &lt;/ span &gt; &lt;/ span &gt; &lt;/ li &gt; <li class="“alt”"> <span>＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; <span class="“tag”">＆lt; &lt;/ span &gt; &lt;span class = “&lt;/ span &gt; <span>＆nbsp; &lt;/跨度&gt; &lt;跨度类= “属性” &gt; ID &lt;/跨度&gt;  &lt;/跨度&gt; &lt;跨度 类= “属性值” &gt;<span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">“org.apache.activemq.RedeliveryPolicy”</span><span class="tag">&gt;</span>&lt; span &gt;＆nbsp; ＆NBSP; &lt;/ span &gt; &lt;/ span &gt; &lt;/ li &gt; &lt; li  class = “ ” &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt; span  class = “ comments ” &gt;＆lt; ！ -是否在每次尝试重新发送失败后，增长这个等待时间＆NBSP; -＆gt; &lt;/ span &gt;&nbsp;&nbsp;</span></span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">property</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">“useExponentialBackOff”</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">“true”</span><span class="tag">&gt;</span><span class="tag">&lt;/</span><span class="tag-name">property</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span>&lt;/ li &gt; &lt; li  class = “ ” &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt; span  class = “ comments ” &gt;＆lt; ！ -重发次数，默认为6次＆NBSP; ＆NBSP; ＆NBSP;这里设置为1次＆NBSP; -＆gt; &lt;/ span &gt; &lt; span &gt;＆nbsp; ＆NBSP; &lt;&gt;</li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">property</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">“maximumRedeliveries”</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">“1”</span><span class="tag">&gt;</span><span class="tag">&lt;/</span><span class="tag-name">property</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">&lt;!–重发时间间隔,默认为1秒&nbsp;–&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">property</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">“initialRedeliveryDelay”</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">“1000”</span><span class="tag">＆gt; &lt;/ span &gt; &lt; span  class = “ tag ” &gt;＆lt; / &lt;/ span &gt; &lt; span  class = “ tag-name ” &gt; property &lt;/ span &gt; &lt; span  class = “ tag ” &gt;＆gt; &lt;/ span &gt; &lt; span &gt;＆nbsp; ＆NBSP; &lt;/ span &gt; &lt;&gt; &lt; li  class = “ ” &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt; span  class = “ comments ” &gt;＆lt; ！ - 第一次失败后重新发送之前等待500毫秒，第二次失败再等待500＆nbsp; <em>＆nbsp; 2毫秒，这里的2就是价值＆nbsp; -＆gt; &lt;/ span &gt; &lt; span &gt;＆nbsp; ＆NBSP; &lt;&lt;/ li &gt; &lt; li  class = “ alt ” &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; &lt; span  class = “ tag ” &gt;＆lt; &lt;/ span &gt; &lt; span  class = “ tag-name ” &gt; property &lt;/ span &gt; &lt; span &gt;＆nbsp;<span class="attribute">name</span><span>=</span><span class="attribute-value">“backOffMultiplier”</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">“2”</span><span class="tag">&gt;</span><span class="tag">&lt;/</span><span class="tag-name">property</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></em></span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!–最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二次重连时间间隔为&nbsp;20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。&nbsp;–<span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">property</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">“maximumRedeliveryDelay”</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">“1000”</span><span class="tag">&gt;</span><span class="tag">&lt;/</span><span class="tag-name">property</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">bean</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><pre class="html" name="code" style="display: none;"><br><span style="font-family:'Microsoft YaHei';">      </span>&lt;!– 定义ReDelivery(重发机制)机制 ，重发时间间隔是100毫秒，最大重发次数是3次 http://www.kuqin.com/shuoit/20140419/339344.html –&gt;<br>    &lt;bean id=”activeMQRedeliveryPolicy” class=”org.apache.activemq.RedeliveryPolicy”&gt;<br>        &lt;!–是否在每次尝试重新发送失败后,增长这个等待时间 –&gt;<br>        &lt;property name=”useExponentialBackOff” value=”true”&gt;&lt;/property&gt;<br>        &lt;!–重发次数,默认为6次   这里设置为1次 –&gt;<br>        &lt;property name=”maximumRedeliveries” value=”1”&gt;&lt;/property&gt;<br>        &lt;!–重发时间间隔,默认为1秒 –&gt;<br>        &lt;property name=”initialRedeliveryDelay” value=”1000”&gt;&lt;/property&gt;<br>        &lt;!–第一次失败后重新发送之前等待500毫秒,第二次失败再等待500  2毫秒,这里的2就是value –&gt;<br>        &lt;property name=”backOffMultiplier” value=”2”&gt;&lt;/property&gt;<br>        &lt;!–最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第<br>            二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。 –&gt;<br>        &lt;property name=”maximumRedeliveryDelay” value=”1000”&gt;&lt;/property&gt;<br>    &lt;/bean&gt;</pre></span></span></span></span></span></span></span></span></span></span></span></span></span></li></span></span></p><p></p><p><span style="font-family:'Microsoft YaHei';font-size:14px;">这一段配置就是<span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">消息重发机制（RedeliveryPolicy）</span></span>的实现，&nbsp; 每一行都有详细的注释。</span></p><p><span style="font-family:'Microsoft YaHei';font-size:14px;">2.引用<span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">RedeliveryPolicy</span></span>的配置：</span></p><p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"></span></span></span></p><div class="“dp-highlighter" bg="" _="" html”=""> <div class="“bar”"> <div class="“tools”"> <b> <a href="http://blog.csdn.net/dly1580854879/article/details/68488003" target="_blank" rel="noopener">html] &lt;/ b&gt; <a href="“＃”class" =“viewsource="" “标题="”普通视图”的onclick" =="" “dp.sh.toolbar.command（="" 'viewsource'，这一点）;返回false;”="">视图平原</a> &lt;跨度数据-MOD = “珀普_ 168”&gt; &lt;一个 href = “＃”  class = “ CopyToClipboard ”  title = “ copy ”  onclick = “ dp.sh.Toolbar.Command（’CopyToClipboard’，this）; return false; ”&gt;复制&lt;/ a &gt; &lt; div  style = “位置：绝对; left：172px; top：1125px; 宽度：16px; height：16px; z-index：99; “ &gt; <embed id="”ZeroClipboardMovie_2“src" =”="" https:="" csdnimg.cn="" public="" highlighter="" zeroclipboard.swf="" “loop="”false“menu" =”false“quality="”best“bgcolor" =”＃ffffff“name="“ZeroClipboardMovie_2”allowscriptaccess" =“always”allowfullscreen="“false”type" =“application="" x-shockwave-flash”pluginspage="“" http:="" www.macromedia.com="" go="" getflashplayer="" ”flashvars="“id" =="" 2＆amp;="" 宽度="16＆amp;" height="16“wmode" =”transparent“width="”16“height" =”16“align="”middle“"> &lt; 位置：绝对; left：172px; top：1125px; 宽度：16px; height：16px; z-index：99; “ &gt; <embed id="”ZeroClipboardMovie_4“src" =”="" https:="" csdnimg.cn="" public="" highlighter="" zeroclipboard.swf="" “loop="”false“menu" =”false“quality="”best“bgcolor" =”＃ffffff“name="“ZeroClipboardMovie_4”allowscriptaccess" =“always”allowfullscreen="“false”type" =“application="" x-shockwave-flash”pluginspage="“" http:="" www.macromedia.com="" go="" getflashplayer="" ”flashvars="“id" =="" 4＆amp;="" 宽度="16＆amp;" height="16“wmode" =”transparent“width="”16“height" =”16“align="”middle“"> &lt; popu_169 “ &gt;  &lt; a  href = ”＃“  class = ” PrintSource “  title = ” print “  onclick = ” dp.sh.Toolbar.Command（’PrintSource’，this）; return false; “ &gt; print &lt;/ a &gt; &lt;/ span &gt; &lt; a  href = ”＃“  class = ” About “  title = ”？“ “ dp.sh.Toolbar.Command（’About’，this）; return false; ” &gt;？&lt;/ a &gt; &lt;/ div &gt; &lt;/ div &gt; &lt; ol  start = “ 1 ”  class = “ dp-xml ” &gt; &lt; li  class = “ alt ” &gt; &lt; span &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP; ＆NBSP;span  class = “ comments ” &gt;＆lt; ！ -创建连接工厂＆NBSP; -＆gt; &lt;/ span &gt; &lt; span &gt;＆nbsp; ＆NBSP; &lt;/跨度&gt; &lt;/跨度&gt; &lt;/李&gt; &lt;李 类= “ ” &gt; &lt;跨度&gt; &lt;跨度 类= “标签” &gt;＆LT; &lt;/ span &gt; = “ tag-name ” &gt; bean &lt;/ span &gt; &lt; span &gt;＆nbsp; &lt;/跨度&gt; &lt;跨度 类= “属性” &gt; ID &lt;/跨度&gt; &lt;跨度&gt; = &lt;/跨度&gt; &lt;跨度 类= “属性值” &gt; “connectionFactory的” &lt;/跨度&gt; &lt;跨度&gt;＆NBSP; &lt;/ span&gt;&gt; &lt; span  class = “ attribute ” &gt; class &lt;/ span &gt; &lt; span &gt; = &lt;/ span &gt; &lt; span  class = “ attribute-value ” &gt; “org.apache.activemq.ActiveMQConnectionFactory” &lt;/ span &gt; &lt; span  class = “标签“ &gt;＆gt; &lt;/ span &gt; &lt; span &gt;＆nbsp; ＆NBSP; &lt;/ span&gt;&gt; &lt;/ span &gt; &lt;/ li &gt; &lt; li  class = “ alt ” &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; &lt; span  class = “ tag ” &gt;＆lt; &lt;/ span &gt; &lt; span  class = “ tag-name ” &gt; property &lt;/ span &gt; &lt; span &gt;＆nbsp; <span class="“" attribute="" ”=""> name &lt;/ span &gt; &lt; span &gt; = &lt;/ span &gt; &lt; span  class = “ attribute-value ” &gt; “brokerURL” &lt;/ span &gt; &lt; span &gt;＆nbsp; &lt;/ span &gt; &lt; span  class = “ attribute ” &gt;值 &lt;/ span &gt; <span> &lt; span  class = “ attribute-value ” &gt; “tcp：// localhost：61616” &lt;/ span &gt; &lt; span  class = “ tag ” &gt;＆gt; &lt;/ span &gt; &lt; span  class = “ tag ” &gt;＆lt; / &lt;/ span &gt; &lt; span  class = “ tag-name ” &gt; property &lt; class = “ tag ” &gt;＆gt; &lt;/ span &gt; &lt; span &gt;＆nbsp; ＆NBSP; &lt;/ span &gt; &lt;/ span &gt; &lt;/ li &gt; &lt; li  class = “ ” &gt; &lt; span &gt;＆nbsp; ＆NBSP; ＆NBSP; ＆NBSP; &lt; span  class = “ tag ” &gt;＆lt; &lt;/ span &gt; &lt; 标签名“ &gt;属性 &lt;/跨度&gt; &lt;跨度&gt;＆NBSP; &lt;/跨度&gt; &lt;跨度 类= ”属性“ &gt;名称 &lt;/跨度&gt; &lt;跨度&gt; = &lt;/跨度&gt; &lt;跨度 类= ”属性值“ &gt; “redeliveryPolicy” &lt;/ span &gt; &lt; span &gt;＆nbsp; &lt;/ span &gt; <span class="“" attribute="" ”=""> ref &lt;/ span &gt; &lt; span &gt; = &lt;/ span &gt; &lt; span  class = “ attribute-value ” &gt; “activeMQRedeliveryPolicy” &lt;/ span &gt; &lt; span &gt;＆nbsp; &lt;/ span &gt; &lt; span  class = “ tag ” &gt; /＆gt; &lt;/ span &gt;&nbsp;&nbsp;</span><span class="comments">&lt;!–&nbsp;引用重发机制&nbsp;–&gt;</span><span>&nbsp;&nbsp;</span></span><li class="alt"><span><span class="tag">&lt;/</span><span class="tag-name">bean</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li></span></a></b></div><pre class="html" name="code" style="display: none;">        &lt;!–创建连接工厂 –&gt;<br>    &lt;bean id=”connectionFactory” class=”org.apache.activemq.ActiveMQConnectionFactory”&gt;<br>        &lt;property name=”brokerURL” value=”tcp://localhost:61616”&gt;&lt;/property&gt;<br>        &lt;property name=”redeliveryPolicy” ref=”activeMQRedeliveryPolicy” /&gt;  &lt;!– 引用重发机制 –&gt;<br>    &lt;/bean&gt;</pre><br><br>在链接工厂里面引入刚才配置好的<span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">RedeliveryPolicy</span></span></span>。<br><br><span style="font-family:'Microsoft YaHei';font-size:14px;">配置完成后，消息一旦发送失败，就会按照消息重发机制配置好的重发次数，时间间隔等因素，再次发送。</span><br><br><span style="font-family:'Microsoft YaHei';font-size:14px;"><img src="https://img-blog.csdn.net/20170401151629954?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGx5MTU4MDg1NDg3OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></span><br><br><span style="font-family:'Microsoft YaHei';font-size:14px;">可以看到配置文件中：&lt;property name=”maximumRedeliveries” value=”1”&gt;&lt;/property&gt;<br></span><br><br><span style="font-family:'Microsoft YaHei';font-size:14px;">设置的重发一次，但是控制台打印出来两个条消息“2”。这就是第一次发送，失败后她又发送了一次，也就是两次。</span><br><br><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span><br><br><span style="font-family:'Microsoft YaHei';font-size:14px;">以上就是消息重发机制的所有实现。<br></span><br><br>            </div><p>  <li>在线代码转换工具</li><br>  <li>在线便民工具</li><br>  <li>在线小游戏</li><br></p><hr><p>更多工具，To be continue…</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&amp;lt; p &amp;gt; &lt;span style=&quot;“font-family：&#39;Microsoft&quot; yahei&#39;;=&quot;&quot; 字体大小：14px的的;=&quot;&quot; “=&quot;&quot;&gt; [弹簧的
      
    
    </summary>
    
      <category term="Java" scheme="http://wjlfun.info/categories/Java/"/>
    
    
      <category term="ActiveMQ" scheme="http://wjlfun.info/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>Struts2</title>
    <link href="http://wjlfun.info/2015/12/17/struts2/"/>
    <id>http://wjlfun.info/2015/12/17/struts2/</id>
    <published>2015-12-16T16:00:00.000Z</published>
    <updated>2018-02-02T00:15:16.279Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h1><h2 id="一、框架概述"><a href="#一、框架概述" class="headerlink" title="一、框架概述"></a>一、框架概述</h2><p>什么是框架，为什么使用框架，框架优点<br>框架（framework）是一个基本概念上的结构，用于去解决或者处理复杂的问题<br>框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。<br>框架是在特定的领域内解决问题。<br>优点<br>重用代码大大增加，软件生产效率和质量也得到了提高<br>使用框架开发，它提供统一的标准，大大降低了我们的后期维护。<br>学习框架重点:了解框架做了什么，我们要在这个基础上在做什么事情。</p><h2 id="二、java开发中常用框架"><a href="#二、java开发中常用框架" class="headerlink" title="二、java开发中常用框架"></a>二、java开发中常用框架</h2><p>SSH   (SSM  SSI)<br>SSH  struts2  spring  hibernate<br>SSM(SSI) springmvc spring mybatis(ibatis)</p><p>SSH 它是企业开发中比较主流的一套架构。<br>SSH框架在开发中所处的位置:</p><h2 id="三、Struts2框架介绍"><a href="#三、Struts2框架介绍" class="headerlink" title="三、Struts2框架介绍"></a>三、Struts2框架介绍</h2><p>什么是struts2框架，学习struts2框架的核心。<br>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互<br>Struts2=struts1+webwork</p><p>问题:struts2是一个mvc框架，它的mvc是什么?</p><p>javaweb开发中的mvc,是在jsp的model2模式中提过<br>Model——javabean<br>View——–jsp<br>Controller—-servlet</p><p>核心点:<br>1.拦截器 interceptor<br>2.Action<br>3.ognl与valueStack</p><p>在现在开发中与struts2比较类似的框架有哪些?<br>Struts1  webwork  springmvc  jsf</p><p>Struts2框架流程</p><h2 id="四、Struts2框架执行流程"><a href="#四、Struts2框架执行流程" class="headerlink" title="四、Struts2框架执行流程"></a>四、Struts2框架执行流程</h2><p>1．Struts2源码导入</p><p>对于struts2框架它的源代码我们主要使用三部分<br>1.struts2核心部分源代码  org.apache.struts2xx<br>src\core\src\main\java<br>2.struts2的xwork核心部分源代码<br>src\xwork-core\src\main\java\com\opensymphony\xwork2<br>3.struts2的插件的源代码<br>src\plugins<br>2．关于struts.xml配置文件中提示问题<br>第一步<br>在eclipse的window下首选面中查找xml catalog<br>第二步<br>Location:配置本地的dtd文件路径<br>key type:选择URI<br>Key: <a href="http://struts.apache.org/dtds/struts-2.3.dtd" target="_blank" rel="noopener">http://struts.apache.org/dtds/struts-2.3.dtd</a><br>注意版本要对应，如果你可以上网，那么会自动缓存dtd,具有提示功能。</p><p>3．执行流程介绍<br>1.当通过浏览器发送一个请求<br>2.会被StrutsPrepareAndExecuteFilter拦截<br>3.会调用strtus2框架默认的拦截器(interceptor)完成部分功能<br>4.在执行Action中操作<br>5.根据Action中方法的执行结果来选择来跳转页面Resutl视图</p><p>一般管StrutsPrepareAndExecuteFilter 叫做前端控制器(核心控制器)，只有配置了这个filter我们的strtus2框架才能使用。<br>Strtus2的默认拦截器(interceptor)它们是在struts-default.xml文件中配置<br>注意:这上xml文件是在strtus-core.jar包中。<br>默认的拦截器是在defaultStack中定义的。</p><h2 id="五、Struts2配置详解"><a href="#五、Struts2配置详解" class="headerlink" title="五、Struts2配置详解"></a>五、Struts2配置详解</h2><p>1．Struts2配置文件加载顺序</p><p>第一个加载的是default.properties文件<br>位置:strtus2-core.jar包   org.apache.struts2包下<br>作用:主要是声明了struts2框架的常量<br>第二个加载的是一批配置文件<br>Strtus-default.xml<br>位置:struts2-corl.jar<br>作用:声明了interceptor  result  bean<br>Strtus-plugin.xml<br>位置:在strtus2的插件包中<br>作用:主要用于插件的配置声明<br>Strtus.xml<br>位置:在我们自己的工程中<br>作用:用于我们自己工程使用strtus2框架的配置<br>第三个加载的是自定义的strtus.properties<br>位置:都是在自己工程的src下<br>作用:定制常量<br>第四自定义配置提供<br>第五加载的是web.xml配置文件<br>主要是加载strtus2框架在web.xml文件中的相关配置.<br>第六 bean相关配置</p><p>重点掌握:<br>1.Default.properties<br>2.Struts-default.xml<br>3.Struts-plugin.xml<br>4.Strtus.xml<br>5.web.xml</p><p>2．struts.xml文件配置介绍<br>2.1．package配置<br>1.name属性  作用:定义一个包的名称，它必须唯一。<br>2.namespace属性 作用:主要是与action标签的name属性联合使用来确定一个action    的访问路径<br>3.extends属性 作用:指定继承自哪个包。一般值是strtus-default<br>        strtus-default包是在strtus-default.xml文件中声明的。<br>4.abstruct属性 它代表当前包是一个抽象的，主要是用于被继承<br>2.2．action配置<br>1.name属性 作用:主要是与package的namespace联合使用来确定一个action的访问路    径<br>2.class属性  作用:用于指示当前的action类<br>3.method属性  作用:用于指示当前的action类中的哪个方法执行<br>2.3．result配置<br>它主要是用于指示结果视图<br>1.name属性 作用是与action类的method方法的返回值进行匹配，来确定跳转路径<br>2.type属性 作用是用于指定跳转方式<br>2.4．扩展<br>关于action配置中的class与method的默认值以及result中的name与type 默认值问题</p><p>原因:strtus-default.xml文件中配置</p><p>它的作用就是当一个请求来时，如果查找不到指定的class及对应的method就会执行<br>ActionSupport类中的execute方法。<br>在这个类的execute方法中默认返回的是”success”<br>也就是说，result的name属性默认值是success,默认的跳转方式是请求转发 dispatcher</p><p>3．常量配置<br>default.properties文件中定义了struts2框架常用常量 .<br>问题:我们怎样可以定义常量<br>1.可以在src下创建一个strtus.properties配置文件<br>2.可以在web.xml文件中配置<br>3.可以直接在strtus.xml文件中定义常量 (推荐)</p><p>注意:后加载的配置文件中的常量会将先加载的常量覆盖</p><h2 id="六、Struts2的Action详解"><a href="#六、Struts2的Action详解" class="headerlink" title="六、Struts2的Action详解"></a>六、Struts2的Action详解</h2><p>Struts2中的action，主要是完成业务逻辑操作。Action替代在servlet中完成的作用。<br>Action的学习主要有两点<br>1.如何创建一个struts2的action<br>2.如果访问一个struts2的action</p><p>1．Action类创建方式(三种)<br>1.创建一个pojo类<br>Pojo(plani Ordinary java object)简单的java对象<br>Pojo类就是没有实现任何接口没有继承任何类<br>优点:无耦合<br>缺点:所有的功能都要自己完成</p><p>2.创建一个类实现一个Action接口<br>com.opensymphony.xwork2.Action</p><p>在Action接口中定义了五个常量，一个execute方法<br>五个常量:它们是默认的五个结果视图<result name="””">:<br>ERROR : 错误视图<br>INPUT: 它是struts2框架中interceptor中发现问题后会访问的一个视图<br>LOGIN:它是一个登录视图，可以在权限操作中使用<br>NONE:它代表的是null,什么都不做（也不会做跳转操作）<br>SUCCESS:这是一个成功视图<br>优点：耦合度低<br>缺点:还是需要自己来完成功能</result></p><p>3.创建一个类继承ActionSupport类<br>com.opensymphony.xwork2.ActionSupport<br>ActionSupport类也实现了Action接口。<br>我们在开发中一般会使用这种方案:<br>优点:具有丰富的功能，例如  表单校验 错误信息设置  国际化<br>缺点:耦合度高<br>2．action的访问方式<br>1.直接通过<action>标签来配置，通过method来指定访问的方法，如果method没有，默认访问的是execute方法。<br>2.简化的action访问方式，可以使用<em>通配符来访问。<br>这种方式的缺点:不建议使用过多的</em>号，它带来程序阅读障碍，不便于理解<br>使用*来简化操作方案，它对名称规范必须进行一个统一。</action></p><p>3．扩展–动态方法调用</p><p>这是strtus2提供的动态方法调用。</p><p>注意:对于strtus2的动态方法调用，要想使用我们必须配置一个常量来开启动态方法调用</p><p>这代表动态方法调用没有开启</p><p>个人不建议使用动态方法调用</p><h2 id="七、Struts2框架封装数据"><a href="#七、Struts2框架封装数据" class="headerlink" title="七、Struts2框架封装数据"></a>七、Struts2框架封装数据</h2><p>主要解决的问题:是在action中如果获取请求参数</p><p>主要有两种方式:<br>1.属性驱动<br>a.直接在action类中提供与请求参数匹配属性，提供get/set方法<br>b.在action类中创始一个javaBean,对其提供get/set ，在请求时页面上要进行修改，      例如 user.username  user.password ,要使用ognl表达式<br>以上两种方式的优缺点:<br>第一种比较简单，在实际操作我们需要将action的属性在赋值给模型(javaBean)    去操作<br>    第二种:不需要在直接将值给javaBean过程，因为直接将数据封装到了javaBean    中。它要求在页面上必须使用ognl表达式，就存在页面不通用问题。</p><p>2.模型驱动<br>步骤:<br>1.让Action类要实现一个指定接口ModelDriven<br>2.实例化模型对象(就是要new出来javaBean)<br>3.重写getModel方法将实例化的模型返回。</p><p>对于模型驱动它与属性驱动对比，在实际开发中使用比较多，模型驱动缺点，它只能对    一个模型数据进行封装。</p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>1.关于strtus2框架的环境搭建<br>2.关于strtus2框架配置<br>3.关于strtus2框架请求参数封装<br>4.关于strtus2框架的路径跳转</p><p>关于action访问的配置</p><package name="””" namespace="””" extends="””"><br><action name="””" class="””" method="””"><br><result name="””" type="””">路径</result><br></action><br></package><p>关于路径跳转问题:<br>是通过<result>来配置跳转的路径.<br>它的name属性是与action中的方法的返回值进行对比的。<br>它的type属性可以取哪些值?</result></p><p>默认值是dispatcher 它代表的是请求转发。针对于jsp页面<br>redirect  它代表的是重定向   针对于jsp页面<br>chain  它类似于请示转发，只不过它是针对于action跳转.<br>redirectAction 它类似于重定向  针对于action<br>关于路径跳转的配置<br>可以直接在<package>下创建全局的result</package></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Struts2&quot;&gt;&lt;a href=&quot;#Struts2&quot; class=&quot;headerlink&quot; title=&quot;Struts2&quot;&gt;&lt;/a&gt;Struts2&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
      <category term="Java" scheme="http://wjlfun.info/categories/Java/"/>
    
    
      <category term="Struts2" scheme="http://wjlfun.info/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>浏览器插件的使用教程</title>
    <link href="http://wjlfun.info/2015/09/23/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://wjlfun.info/2015/09/23/浏览器插件的使用教程/</id>
    <published>2015-09-22T16:00:00.000Z</published>
    <updated>2018-01-28T13:28:26.012Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="浏览器插件的使用教程"><a href="#浏览器插件的使用教程" class="headerlink" title="浏览器插件的使用教程"></a>浏览器插件的使用教程</h1><h2 id="安装油猴插架"><a href="#安装油猴插架" class="headerlink" title="安装油猴插架"></a>安装油猴插架</h2><ul><li>[下载安装][<a href="http://www.tampermonkey.net" target="_blank" rel="noopener">http://www.tampermonkey.net</a>]</li><li>选择和你浏览器对应的插架，如下图<br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031141_995.png" alt=""></li><li>安装成功后可以在浏览器插件（扩展）中看到油猴，如下图<br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031143_316.png" alt=""></li></ul><h2 id="使用油猴安装插件"><a href="#使用油猴安装插件" class="headerlink" title="使用油猴安装插件"></a>使用油猴安装插件</h2><ul><li>点击油猴图标可以打开油猴的控制面板，如下图<br>   <img src="http://os4z8t7lb.bkt.clouddn.com/201709031145_947.png" alt=""></li><li>点击[获取新脚本][<a href="http://tampermonkey.net/scripts.php" target="_blank" rel="noopener">http://tampermonkey.net/scripts.php</a>]</li><li>选择脚本网站，推荐使用<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">GreasyFork</a><br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031147_863.png" alt=""></li></ul><h2 id="选择要安装的脚本"><a href="#选择要安装的脚本" class="headerlink" title="选择要安装的脚本"></a>选择要安装的脚本</h2><ul><li>在首页点击脚本列表<br>   <img src="http://os4z8t7lb.bkt.clouddn.com/201709031149_210.png" alt=""></li><li>选择你需要的脚本点击安装<br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031150_460.png" alt=""></li><li>点击进行安装，如下图<br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031152_320.png" alt=""><br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031938_626.png" alt=""></li><li>安装成功后可以在油猴面板查看<br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031527_545.png" alt=""><br>  <img src="http://os4z8t7lb.bkt.clouddn.com/201709031529_999.png" alt=""><blockquote><p>插件可根据自己的需求安装，在脚本列表中可以看到很多有意思的插件</p></blockquote></li></ul><h2 id="举例：查看VIP视频"><a href="#举例：查看VIP视频" class="headerlink" title="举例：查看VIP视频"></a>举例：查看VIP视频</h2><ol><li>安装<code>VIP视频在线解析</code>插件</li><li>打开视频网站，播放视频，可看到插件，如下图<br> <img src="http://os4z8t7lb.bkt.clouddn.com/201709032010_638.png" alt="优酷网站"><br> <img src="http://os4z8t7lb.bkt.clouddn.com/201709032016_912.png" alt="爱奇艺"><br> <img src="http://os4z8t7lb.bkt.clouddn.com/201709032020_721.png" alt="腾讯视频"><blockquote><p>解析VIP 视频的插件很多，选一个可以用的即可，也可以安装多个<br>插件的作用只是</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;浏览器插件的使用教程&quot;&gt;&lt;a href=&quot;#浏览器插件的使用教程&quot; class=&quot;headerlink&quot; title=&quot;浏览器插件的使用教程&quot;&gt;&lt;/a&gt;浏览器插件的
      
    
    </summary>
    
      <category term="Life" scheme="http://wjlfun.info/categories/Life/"/>
    
    
      <category term="浏览器插件" scheme="http://wjlfun.info/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://wjlfun.info/2015/09/21/Linux/"/>
    <id>http://wjlfun.info/2015/09/21/Linux/</id>
    <published>2015-09-20T16:00:00.000Z</published>
    <updated>2018-01-30T05:57:23.092Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="初学者必备"><a href="#初学者必备" class="headerlink" title="初学者必备"></a>初学者必备</h2><ol><li>Linux常用命令</li></ol><h3 id="01-Linux的简介-avi"><a href="#01-Linux的简介-avi" class="headerlink" title="01-Linux的简介.avi"></a>01-Linux的简介.avi</h3><p>什么是Linux<br>Linux是基于Unix的,是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。<br>Linux的应用<br>服务器系统: Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等<br>嵌入式系统: 路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等<br>高性能运算、计算密集型应用 Linux有强大的运算能力<br>桌面应用系统<br>移动手持系统<br>Linux的主流版本<br>Ubuntu, Centos, redhat, fedora, freebsd…</p><h3 id="02-虚拟软件的安装-avi"><a href="#02-虚拟软件的安装-avi" class="headerlink" title="02-虚拟软件的安装.avi"></a>02-虚拟软件的安装.avi</h3><p>安装参考《虚拟软件vmware安装.doc》</p><h3 id="03-CentOS的安装-avi"><a href="#03-CentOS的安装-avi" class="headerlink" title="03-CentOS的安装.avi"></a>03-CentOS的安装.avi</h3><p>参考《CentOS6详细安装文档.doc》</p><h3 id="04-Linux的目录结构-avi"><a href="#04-Linux的目录结构-avi" class="headerlink" title="04-Linux的目录结构.avi"></a>04-Linux的目录结构.avi</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201801222253_456.png" alt=""></p><h3 id="05-Linux的常用命令：cd命令-avi"><a href="#05-Linux的常用命令：cd命令-avi" class="headerlink" title="05-Linux的常用命令：cd命令.avi"></a>05-Linux的常用命令：cd命令.avi</h3><p>==切换目录==<br><code>cd app</code> 切换到app目录<br><code>cd ..</code> 切换到上一层目录<br><code>cd /</code> 切换到系统根目录<br><code>cd ~</code> 切换到用户主目录<br><code>cd -</code> 切换到上一个所在目录</p><h3 id="06-Linux的常用命令：ls、ll、dir命令-avi"><a href="#06-Linux的常用命令：ls、ll、dir命令-avi" class="headerlink" title="06-Linux的常用命令：ls、ll、dir命令.avi"></a>06-Linux的常用命令：ls、ll、dir命令.avi</h3><p>==列出文件列表==<br>ls(list)是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容<br>格式：ls[参数] [路径或文件名]</p><p>在linux中以 <code>.</code> 开头的文件都是隐藏的文件<br><code>ls</code><br><code>ls -a</code>  显示所有文件或目录（包含隐藏的文件）<br><code>ls -l</code>  缩写成ll</p><h3 id="07-Linux的常用命令：mkdir、rmdir命令-avi"><a href="#07-Linux的常用命令：mkdir、rmdir命令-avi" class="headerlink" title="07-Linux的常用命令：mkdir、rmdir命令.avi"></a>07-Linux的常用命令：mkdir、rmdir命令.avi</h3><p>==创建目录==<br><code>mkdir app</code> 在当前目录下创建app目录<br><code>mkdir –p app2/test</code> 级联创建aap2以及test目<br>==移除目录==<br><code>rmdir(remove directory)</code>命令可用来删除“空”的子目录<br><code>rmdir app</code>  删除app目录</p><h3 id="08-Linux的常用命令：cat、more、less、tail命令-avi"><a href="#08-Linux的常用命令：cat、more、less、tail命令-avi" class="headerlink" title="08-Linux的常用命令：cat、more、less、tail命令.avi"></a>08-Linux的常用命令：cat、more、less、tail命令.avi</h3><p>浏览文件</p><p><code>cat</code> 用于显示文件的内容<br>格式：cat[参数]&lt;文件名&gt;<br><code>cat yum.conf</code></p><p><code>more</code> 一般用于要显示的内容会超过一个画面长度的情况。按空格键显示下一个画面。回车显示下一行内容。按 q 键退出查看。<br><code>more yum.conf</code> 空格显示下一页数据  回车显示下一行的数据</p><p><code>less</code> 用法和<code>more</code>类似，不同的是less可以通过PgUp、PgDn键来控制<br><code>less yum.conf</code>  PgUp 和 PgDn 进行上下翻页.</p><p><code>tail</code>命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。<br>==<code>tail -10 /etc/passwd</code>  查看后10行数据==<br><code>tail -f catalina.log</code>  ==动态查看日志==<br><code>ctrl+c</code> 结束查看</p><h3 id="09-Linux的常用命令：rm命令-avi"><a href="#09-Linux的常用命令：rm命令-avi" class="headerlink" title="09-Linux的常用命令：rm命令.avi"></a>09-Linux的常用命令：rm命令.avi</h3><p>==文件删除操作==<br><code>rm</code>  删除文件<br><code>rm a.txt</code>  删除a.txt文件<br>删除需要用户确认，y/n rm 删除不询问<br><code>rm -f a.txt</code>  不询问，直接删除 rm 删除目录<br><code>rm -r a</code>  递归删除<br>不询问递归删除（慎用）<br><code>rm -rf  a</code>  不询问递归删除<br><code>rm -rf *</code>    删除所有文件<br><code>rm -rf /*</code>   自杀</p><h3 id="10-Linux的远程连接：CRT的软件的安装和使用-avi"><a href="#10-Linux的远程连接：CRT的软件的安装和使用-avi" class="headerlink" title="10-Linux的远程连接：CRT的软件的安装和使用.avi"></a>10-Linux的远程连接：CRT的软件的安装和使用.avi</h3><h3 id="11-Linux的常用命令：cp、mv命令-avi"><a href="#11-Linux的常用命令：cp、mv命令-avi" class="headerlink" title="11-Linux的常用命令：cp、mv命令.avi"></a>11-Linux的常用命令：cp、mv命令.avi</h3><p>文件的拷贝和剪切<br>cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。<br><code>cp a.txt b.txt</code>   将a.txt复制为b.txt文件<br><code>cp a.txt ../</code>     将a.txt文件复制到上一层目录中 </p><p>mv 移动或者重命名<br><code>mv a.txt ../</code>   将a.txt文件移动到上一层目录中<br><code>mv a.txt b.txt</code> 将a.txt文件重命名为b.txt</p><h3 id="12-Linux的常用命令：tar命令-avi"><a href="#12-Linux的常用命令：tar命令-avi" class="headerlink" title="12-Linux的常用命令：tar命令.avi"></a>12-Linux的常用命令：tar命令.avi</h3><p>==打包或者解压==<br>tar命令位于/bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。<br>一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。<br>常用参数：<br><code>-c:</code>创建一个新tar文件<br><code>-v:</code>显示运行过程的信息<br><code>-f:</code>指定文件名<br><code>-z:</code>调用gzip压缩命令进行压缩<br><code>-t:</code>查看压缩文件的内容<br><code>-x:</code>解开tar文件</p><p>==打包==<br><code>tar –cvf xxx.tar ./*</code><br>打包并且压缩：<br><code>tar –zcvf xxx.tar.gz ./*</code></p><p>==解压==<br><code>tar –xvf xxx.tar</code><br><code>tar -xvf xxx.tar.gz -C /usr/aaa</code></p><h3 id="13-Linux的常用命令：grep命令-avi"><a href="#13-Linux的常用命令：grep命令-avi" class="headerlink" title="13-Linux的常用命令：grep命令.avi"></a>13-Linux的常用命令：grep命令.avi</h3><p>grep命令<br>查找符合条件的字符串<br>用法: grep [选项]… PATTERN [FILE]…<br>示例：<br><code>grep lang anaconda-ks.cfg</code>  在文件中查找lang<br><code>grep lang anaconda-ks.cfg –color</code> 高亮显示</p><h3 id="14-Linux的常用命令：其他常用命令-avi"><a href="#14-Linux的常用命令：其他常用命令-avi" class="headerlink" title="14-Linux的常用命令：其他常用命令.avi"></a>14-Linux的常用命令：其他常用命令.avi</h3><p>其他常用命令<br><code>pwd</code> 显示当前所在目录<br><code>touch</code> 创建一个空文件<br><code>touch a.txt</code><br><code>ll -h</code> 友好显示文件大小<br><code>wget</code> 下载资料 <code>wget http://nginx.org/download/nginx-1.9.12.tar.gz</code></p><h3 id="15-Linux的常用命令：VI和VIM编辑器-avi"><a href="#15-Linux的常用命令：VI和VIM编辑器-avi" class="headerlink" title="15-Linux的常用命令：VI和VIM编辑器.avi"></a>15-Linux的常用命令：VI和VIM编辑器.avi</h3><p>==Vi和Vim编辑器==<br>在Linux下一般使用vi编辑器来编辑文件<br>vi既可以查看文件也可以编辑文件<br>三种模式：命令行、插入、底行模式<br>切换到命令行模式：按Esc键<br>切换到插入模式：按 i 、o、a键<br><code>i</code> 在当前位置生前插入<br><code>I</code> 在当前行首插入<br><code>a</code> 在当前位置后插入<br><code>A</code> 在当前行尾插入<br><code>o</code> 在当前行之后插入一行<br><code>O</code> 在当前行之前插入一行</p><p>切换到底行模式：按 <code>:</code>（冒号）</p><p>打开文件：<code>vim file</code><br>退出：<code>esc :q</code><br>修改文件：输入<code>i</code>进入插入模式<br>保存并退出：<code>esc :wq</code><br>不保存退出：<code>esc :q!</code></p><h3 id="16-Linux的常用命令：重定向输出-avi"><a href="#16-Linux的常用命令：重定向输出-avi" class="headerlink" title="16-Linux的常用命令：重定向输出.avi"></a>16-Linux的常用命令：重定向输出.avi</h3><p><code>&gt;</code>  重定向输出，覆盖原有内容<br><code>&gt;&gt;</code> 重定向输出，又追加功能</p><p><code>cat /etc/passwd &gt; a.txt</code>  将输出定向到a.txt中<br><code>cat /etc/passwd &gt;&gt; a.txt</code>  输出并且追加</p><p><code>ifconfig &gt; ifconfig.txt</code></p><h3 id="17-Linux的常用命令：管道和命令执行控制-avi"><a href="#17-Linux的常用命令：管道和命令执行控制-avi" class="headerlink" title="17-Linux的常用命令：管道和命令执行控制.avi"></a>17-Linux的常用命令：管道和命令执行控制.avi</h3><p>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入</p><p><code>ls --help | more</code>  分页查询帮助信息<br><code>ps –ef | grep java</code>  查询名称中包含java的进程<br><code>ifconfig | more</code><br><code>cat index.html | more</code><br><code>ps –ef | grep aio</code></p><p>命令控制<br>命令之间使用 <code>&amp;&amp;</code> 连接，实现逻辑与的功能<br>只有在 <code>&amp;&amp;</code> 左边的命令返回真,<code>&amp;&amp;</code> 右边的命令才会被执行<br>只要有一个命令返回假,后面的命令就不会被执行。<br><code>mkdir test &amp;&amp; cd test</code></p><h3 id="18-Linux的常用命令：网络通讯的命令-avi"><a href="#18-Linux的常用命令：网络通讯的命令-avi" class="headerlink" title="18-Linux的常用命令：网络通讯的命令.avi"></a>18-Linux的常用命令：网络通讯的命令.avi</h3><p>网络通讯命令<br><code>ifconfig</code>  显示或设置网络设备<br><code>ifconfig eth0 up</code> 启用eth0网卡<br><code>ifconfig eth0 down</code>  停用eth0网卡 ping   探测网络是否通畅。<br><code>ping 192.168.0.1 netstat</code> 查看网络端口。<br><code>netstat -an | grep 3306</code> 查询3306端口占用情况</p><h3 id="19-Linux的常用命令：系统管理的命令-avi"><a href="#19-Linux的常用命令：系统管理的命令-avi" class="headerlink" title="19-Linux的常用命令：系统管理的命令.avi"></a>19-Linux的常用命令：系统管理的命令.avi</h3><p>系统管理命令<br><code>date</code> 显示或设置系统时间<br><code>date</code>  显示当前系统时间<br><code>date -s “2014-01-01 10:10:10“</code>  设置系统时间 df 显示磁盘信息<br><code>df –h</code>  友好显示大小 free 显示内存状态<br><code>free –m</code> 以mb单位显示内存组昂头 top 显示，管理执行中的程序</p><p><code>clear</code> 清屏幕<br><code>ps</code> 正在运行的某个进程的状态<br><code>ps –ef</code>  查看所有进程<br><code>ps –ef | grep ssh</code> 查找某一进程 kill 杀掉某一进程<br><code>kill 2868</code>  杀掉2868编号的进程<br><code>kill -9 2868</code>  强制杀死进程</p><p><code>du</code> 显示目录或文件的大小<br><code>du –h</code> 显示当前目录的大小<br><code>who</code> 显示目前登入系统的用户信息<br><code>hostname</code> 查看当前主机名<br>修改：<code>vi /etc/sysconfig/network</code><br><code>uname</code> 显示系统信息。<br><code>uname -a</code> 显示本机详细信息<br>依次为：内核名称(类别)，主机名，内核版本号，内核版本，内核编译日期，硬件名，处理器类型，硬件平台类型，操作系统名称</p><h3 id="20-Linux的常用命令：用户管理的命令-avi"><a href="#20-Linux的常用命令：用户管理的命令-avi" class="headerlink" title="20-Linux的常用命令：用户管理的命令.avi"></a>20-Linux的常用命令：用户管理的命令.avi</h3><p>用户管理命令<br><code>useradd</code> 添加一个用户<br><code>useradd test</code> 添加test用户<br><code>useradd test -d /home/t1</code>  指定用户home目录<br><code>passwd</code>  设置、修改密码<br><code>passwd test</code>  为test用户设置密码</p><p>切换登录：<br><code>ssh -l test -p 22 192.168.19.128</code><br><code>su – 用户名</code><br><code>userdel</code> 删除一个用户<br><code>userdel test</code> 删除test用户(不会删除home目录)<br><code>userdel –r test</code>  删除用户以及home目录</p><h3 id="21-Linux的常用命令：组管理的命令-avi"><a href="#21-Linux的常用命令：组管理的命令-avi" class="headerlink" title="21-Linux的常用命令：组管理的命令.avi"></a>21-Linux的常用命令：组管理的命令.avi</h3><p>组管理命令<br>当在创建一个新用户user时，若没有指定他所属于的组，就建立一个和该用户同名的私有组<br>创建用户时也可以指定所在组<br><code>groupadd</code>  创建组<br><code>groupadd public</code>  创建一个名为public的组<br><code>useradd u1 –g public</code>  创建用户指定组 groupdel 删除组，如果该组有用户成员，必须先删除用户才能删除组。<br><code>groupdel public</code></p><h3 id="22-Linux的常用命令：权限管理-avi"><a href="#22-Linux的常用命令：权限管理-avi" class="headerlink" title="22-Linux的常用命令：权限管理.avi"></a>22-Linux的常用命令：权限管理.avi</h3><p>文件权限<br><img src="http://os4z8t7lb.bkt.clouddn.com/201801231353_92.png" alt=""><br>变更文件权限<br><code>chmod</code> 变更文件或目录的权限。<br><code>chmod 755 a.txt</code><br><code>chmod u=rwx,g=rx,o=rx a.txt</code><br><code>chmod 000 a.txt  / chmod 777 a.txt chown</code> ==变更文件或目录改文件所属用户和组==<br><code>chown u1:public a.txt</code> ：变更当前的目录或文件的所属用户和组<br><code>chown -R u1:public dir</code> ：变更目录中的所有的子目录及文件的所属用户和组</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Linux学习&quot;&gt;&lt;a href=&quot;#Linux学习&quot; class=&quot;headerlink&quot; title=&quot;Linux学习&quot;&gt;&lt;/a&gt;Linux学习&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
      <category term="Java" scheme="http://wjlfun.info/categories/Java/"/>
    
    
      <category term="Linux" scheme="http://wjlfun.info/tags/Linux/"/>
    
  </entry>
  
</feed>
